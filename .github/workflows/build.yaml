on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "helm/**"
      - "assets/**"
      - "**.md"
  push:
    branches:
      - main

name: Ensure parseable builds on all release targets
jobs:
  build-linux:
    name: Build for ${{matrix.target}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-unknown-linux-gnu # linux(arm)
          - x86_64-unknown-linux-gnu # linux(64 bit)

    steps:
      - uses: actions/checkout@v4

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Configure Cross.toml
        run: |
          cat > Cross.toml << 'EOF'
          [build.env]
          passthrough = [
            "RUST_BACKTRACE",
            "RUST_LOG",
            "OPENSSL_DIR",
            "OPENSSL_LIB_DIR",
            "OPENSSL_INCLUDE_DIR",
            "SASL2_DIR",
            "PKG_CONFIG_PATH",
            "PKG_CONFIG_ALLOW_CROSS"
          ]

          [target.aarch64-unknown-linux-gnu]
          pre-build = [
            "dpkg --add-architecture arm64",
            "apt-get update",
            "apt-get install -y --no-install-recommends pkg-config libssl-dev:arm64 gcc-aarch64-linux-gnu libc6-dev-arm64-cross libsasl2-dev:arm64",
            "export OPENSSL_DIR=/usr",
            "export OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu",
            "export OPENSSL_INCLUDE_DIR=/usr/include",
            "export SASL2_DIR=/usr",
            "export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig",
            "export PKG_CONFIG_ALLOW_CROSS=1"
          ]

          [target.x86_64-unknown-linux-gnu]
          pre-build = [
            "apt-get update",
            "apt-get install -y --no-install-recommends pkg-config libssl-dev libsasl2-dev",
            "export OPENSSL_DIR=/usr",
            "export OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu",
            "export OPENSSL_INCLUDE_DIR=/usr/include",
            "export SASL2_DIR=/usr",
            "export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig"
          ]
          EOF

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build with cross
        run: cross build --target ${{ matrix.target }} --features "rdkafka-ssl,rdkafka-sasl"

  build-windows:
    name: Build for windows
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '5e0cab206a5ea620130caf672fce3e4a6b5666a1'

      - name: Install dependencies
        run: |
          vcpkg install openssl:x64-windows-static cyrus-sasl:x64-windows-static
          echo "OPENSSL_DIR=$env:VCPKG_ROOT/installed/x64-windows-static" >> $env:GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $env:GITHUB_ENV
          echo "SASL2_DIR=$env:VCPKG_ROOT/installed/x64-windows-static" >> $env:GITHUB_ENV
          echo "SASL2_STATIC=1" >> $env:GITHUB_ENV
        shell: pwsh

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build on windows
        run: cargo build --target x86_64-pc-windows-msvc --features "rdkafka-ssl,rdkafka-sasl"

  build-macos:
    name: Build for ${{matrix.target}}
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin # macos(arm)
          - x86_64-apple-darwin # macos(intel 64 bit)

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install openssl@3 cyrus-sasl

      - name: Set environment variables
        run: |
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "SASL2_DIR=$(brew --prefix cyrus-sasl)" >> $GITHUB_ENV

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build on ${{ matrix.target }}
        run: cargo build --target ${{ matrix.target }} --features "rdkafka-ssl,rdkafka-sasl"
